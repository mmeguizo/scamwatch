{"version":3,"sources":["./node_modules/angular2-toaster/src/toast.component.d.ts.ToastComponent.html","./node_modules/angular2-toaster/src/toaster-container.component.d.ts.ToasterContainerComponent.html","./src/app/login/login-routing.modules.ts","./src/app/login/login.component.html","./src/app/login/login.component.ts","./src/app/login/login.module.ts","./src/app/login/modals/test/test.component.html","./src/app/login/modals/test/test.component.ts"],"names":[],"mappings":"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","file":"app-login-login-module-ngfactory-es2015.js","sourcesContent":["\n        <i class=\"toaster-icon\" [ngClass]=\"iconClass\"></i>\n        <div class=\"toast-content\">\n            <div [ngClass]=\"titleClass\">{{toast.title}}</div>\n            <div [ngClass]=\"messageClass\" [ngSwitch]=\"toast.bodyOutputType\">\n                <div *ngSwitchCase=\"bodyOutputType.Component\" #componentBody></div>\n                <div *ngSwitchCase=\"bodyOutputType.TrustedHtml\" [innerHTML]=\"safeBodyHtml\"></div>\n                <div *ngSwitchCase=\"bodyOutputType.Default\">{{toast.body}}</div>\n            </div>\n        </div>\n        <div class=\"toast-close-button\" *ngIf=\"toast.showCloseButton\" (click)=\"click($event, toast)\"\n            [innerHTML]=\"safeCloseHtml\">\n        </div>","\n        <div id=\"toast-container\" [ngClass]=\"[toasterconfig.positionClass]\">\n            <div toastComp *ngFor=\"let toast of toasts\" class=\"toast\" [toast]=\"toast\"\n                [@toastState]=\"toasterconfig.animation\"\n                [iconClass]=\"toasterconfig.iconClasses[toast.type]\"\n                [titleClass]=\"toasterconfig.titleClass\"\n                [messageClass]=\"toasterconfig.messageClass\"\n                [ngClass]=\"toasterconfig.typeClasses[toast.type]\"\n                (click)=\"click(toast)\" (clickEvent)=\"childClick($event)\"\n                (mouseover)=\"stopTimer(toast)\" (mouseout)=\"restartTimer(toast)\">\n            </div>\n        </div>\n        ","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule, } from '@angular/router';\nimport { LoginComponent } from './login.component';\nimport { NotAuthGuard } from '../guard/notAuth.guard';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginComponent,\n    // canActivate: [NotAuthGuard]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LoginRoutingModule { }\n","<nb-layout>\n  <nb-layout-column>\n    <div class=\"wrapper\">\n      <nb-card-header style=\"border-bottom: none\">\n        <button nbButton status=\"danger\" (click)=\" backToSearch()\"ghost>\n          {{ \"Back to Search\" }}\n        </button></nb-card-header\n      >\n      <div class=\"container\">\n        <img src=\"../../assets//images/scam.png\" class=\"tinker-logo\" />\n        <!-- <img src=\"../../assets//images/chsmc.png\" class=\"tinker-logo\"> -->\n        <h2 style=\"z-index: 9999999\">ScamWatch PH</h2>\n        <div class=\"form-text error\">\n          {{ msg }}\n          <toaster-container [toasterconfig]=\"config\"> </toaster-container>\n        </div>\n\n        <!-- <form class=\"form\" #f=\"ngForm\">\n        <input ng-model=\"login\" type=\"text\" placeholder=\"Username\" [(ngModel)]=\"username\" id=\"username\" #userName=\"ngModel\" name=\"username\" required>\n        <input ng-model=\"pwd\" type=\"password\" placeholder=\"Password\" [(ngModel)]=\"password\"  #passWord=\"ngModel\" name=\"password\" id=\"password\" required>\n        <button type=\"submit\" id=\"login-button\" (click)=\" onLoginSubmit()\" [disabled]=\"f.invalid\" [nbSpinner]=\"\" nbSpinnerStatus=\"success\">Login</button>\n      </form> -->\n        <form [formGroup]=\"form\" (submit)=\"onLoginSubmit()\">\n          <div class=\"form-group\">\n            <label style=\"color: white\" for=\"username\">Username</label>\n            <div\n              [ngClass]=\"{\n                'has-error':\n                  form.controls.username.errors && form.controls.username.dirty,\n                'has-success':\n                  form.controls.username.valid && form.controls.username.dirty\n              }\"\n            >\n              <input\n                class=\"form-control\"\n                type=\"text\"\n                name=\"username\"\n                formControlName=\"username\"\n              />\n              <ul class=\"help-block\">\n                <li\n                  *ngIf=\"\n                    form.controls.username.errors?.required &&\n                    form.controls.username.dirty\n                  \"\n                >\n                  This field is required.\n                </li>\n              </ul>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <label style=\"color: white\" for=\"password\">Password</label>\n            <div\n              [ngClass]=\"{\n                'has-error':\n                  form.controls.password.errors && form.controls.password.dirty,\n                'has-success':\n                  form.controls.password.valid && form.controls.password.dirty\n              }\"\n            >\n              <input\n                class=\"form-control\"\n                type=\"password\"\n                name=\"password\"\n                formControlName=\"password\"\n              />\n              <ul class=\"help-block\">\n                <li\n                  *ngIf=\"\n                    form.controls.password.errors?.required &&\n                    form.controls.password.dirty\n                  \"\n                >\n                  This field is required.\n                </li>\n              </ul>\n            </div>\n          </div>\n          <input\n            [disabled]=\"!form.valid || processing\"\n            class=\"btn btn-primary\"\n            type=\"submit\"\n            value=\"Login\"\n          />\n        </form>\n      </div>\n    </div>\n  </nb-layout-column>\n</nb-layout>\n<button nbButton status=\"success\" ghost>\n  {{ \"Back to Search\" }}\n</button>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, AbstractControl, FormBuilder, Validators, NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\n// import { routerTransition } from '../router.animation';\n// import { AuthService } from '../@core/services/auth.service';\n// import { SharedGlobalService } from '../@core/services/shared.global.service';\nimport { NbDialogService } from '@nebular/theme';\nimport { ToasterService, ToasterConfig } from 'angular2-toaster';\nimport { ConnectionService } from '../@core/services/connection.service';\nimport { AuthService } from '../services/auth.service';\nimport { TestComponent } from './modals/test/test.component';\n// import { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n  // animations: [routerTransition()]\n})\nexport class LoginComponent implements OnInit {\n\n  username: String;\n  password: String;\n  msg: String;\n  loader = false;\n  disableSubmit;\n  conn;\n  userID;\n\n  messageClass;\n  message;\n  processing = false;\n  form: FormGroup;\n\n  public config: ToasterConfig =\n    new ToasterConfig({\n      showCloseButton: true,\n      tapToDismiss: false,\n      timeout: 0\n    });\n\n\n  constructor(\n    // public sgs: SharedGlobalService,\n    // public authService: AuthService,\n    private dialogService: NbDialogService,\n    public cs: ConnectionService,\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private toastr: ToasterService,\n\n  ) {\n    // sgs.setBrowserTitle.emit('Login');\n    this.createForm();\n  }\n\n  ngOnInit() {\n\n  }\n\n  createForm() {\n    this.form = this.formBuilder.group({\n      username: ['', Validators.required], // Username field\n      password: ['', Validators.required] // Password field\n    });\n  }\n\n  enableForm() {\n    this.form.controls['username'].enable(); // Enable username field\n    this.form.controls['password'].enable(); // Enable password field\n  }\n\n  disableForm() {\n    this.form.controls['username'].disable(); // Disable username field\n    this.form.controls['password'].disable(); // Disable password field\n  }\n  Submit() {\n    const user = {\n      username: this.username,\n      password: this.password,\n    };\n\n  }\n  // Functiont to submit form and login user\n  onLoginSubmit() {\n    this.processing = true; // Used to submit button while is being processed\n    this.disableForm(); // Disable form while being process\n    // Create user object from user's input\n    const user = {\n      username: this.form.get('username').value, // Username input field\n      password: this.form.get('password').value // Password input field\n    }\n\n    // Function to send login data to API\n    this.authService.login(user).subscribe((data: any) => {\n\n      // Check if response was a success or error\n      if (!data.success) {\n        // this.messageClass = 'alert alert-danger'; // Set bootstrap error class\n        // this.message = data.message; // Set error message\n        //  this.toastr.error('Failed', data.message);\n        this.toastr.pop('error', 'Failed', data.message);\n\n\n        this.processing = false; // Enable submit button\n        this.enableForm(); // Enable form for editting\n\n\n\n      } else {\n        // this.messageClass = 'alert alert-success'; // Set bootstrap success class\n        // this.message = data.message; // Set success message\n        //  this.toastr.success('Success', data.message);\n        this.toastr.pop('success', 'Success', data.message);\n\n        // Function to store user's token in client local storage\n        this.authService.storeUserData(data.token, data.user, data.userToken, data.id);\n\n\n        if (this.authService.CurrentlyloggedIn()) {\n          console.log(this.authService.CurrentlyloggedIn());\n          setTimeout(() => {\n            this.router.navigate([data.role]); // Navigate to dashboard view\n          }, 1000);\n\n        } else {\n          this.authService.logout()\n          this.router.navigate(['login']); // Navigate to dashboard view\n        }\n\n        // After 2 seconds, redirect to dashboard page\n\n      }\n    });\n  }\n\n\n  showBootstrapModal() {\n    // this.sgs.Modal({\n    //     header: `Notice`,\n    //     content: `\n    //     test\n    //     `,\n    //     buttonName: 'close'\n    //   }, { size: 'md'});\n  }\n\n  showMaterialModal() {\n    this.dialogService.open(TestComponent, {\n      context: {\n        title: 'This is a title passed to the dialog component',\n      },\n    });\n  }\n\n\n  backToSearch(){\n\n    this.router.navigate(['app/viewscammer'])\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginRoutingModule } from './login-routing.modules';\nimport { LoginComponent } from './login.component';\nimport { ThemeModule } from '../@theme/theme.module';\nimport { NbSpinnerModule } from '@nebular/theme';\nimport { NbCardModule, NbButtonModule } from '@nebular/theme';\nimport { NbLayoutModule } from '@nebular/theme';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TestComponent } from './modals/test/test.component';\nimport { ToasterModule } from 'angular2-toaster';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ThemeModule,\n    LoginRoutingModule,\n    NbSpinnerModule,\n    NbCardModule,\n    NbLayoutModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NbButtonModule,\n    ToasterModule.forChild()\n\n  ],\n  declarations: [LoginComponent, TestComponent],\n  entryComponents: [\n    TestComponent\n  ]\n})\nexport class LoginModule { }\n","<nb-card>\n    <nb-card-header>{{ title }}</nb-card-header>\n    <nb-card-body>\n      <div class=\"row\">\n        <div class=\"col-sm-12\">\n          TEST\n        </div>\n      </div>\n    </nb-card-body>\n    <nb-card-footer>\n      <button nbButton matRipple hero status=\"primary\" (click)=\"dismiss()\">Dismiss Dialog</button>\n    </nb-card-footer>\n</nb-card>\n  ","import { Component, OnInit, Input } from '@angular/core';\nimport { NbDialogRef } from '@nebular/theme';\n\n@Component({\n  selector: 'ngx-test',\n  templateUrl: './test.component.html',\n  styleUrls: ['./test.component.scss']\n})\nexport class TestComponent implements OnInit {\n\n  @Input() title: String;\n\n  constructor(protected ref: NbDialogRef<TestComponent>) {}\n\n  ngOnInit(): void {\n  }\n\n  dismiss() {\n    this.ref.close();\n  }\n  \n}\n\n"],"sourceRoot":"webpack:///"}