{"version":3,"sources":["webpack:///src/app/login/login-routing.modules.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.module.ts","webpack:///src/app/login/modals/test/test.component.html","webpack:///src/app/login/modals/test/test.component.ts"],"names":["routes","path","component","LoginRoutingModule","LoginComponent","dialogService","cs","formBuilder","authService","router","toastr","loader","processing","config","showCloseButton","tapToDismiss","timeout","createForm","form","group","username","required","password","controls","enable","disable","user","disableForm","get","value","login","subscribe","data","success","pop","message","enableForm","storeUserData","token","userToken","id","CurrentlyloggedIn","console","log","setTimeout","navigate","role","logout","open","context","title","LoginModule","TestComponent","ref","close"],"mappings":"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","file":"app-login-login-module-ngfactory-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule, } from '@angular/router';\nimport { LoginComponent } from './login.component';\nimport { NotAuthGuard } from '../guard/notAuth.guard';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginComponent,\n    // canActivate: [NotAuthGuard]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LoginRoutingModule { }\n","<nb-layout>\n  <nb-layout-column>\n    <div class=\"wrapper\">\n      <nb-card-header style=\"border-bottom: none\">\n        <button nbButton status=\"danger\" (click)=\" backToSearch()\"ghost>\n          {{ \"Back to Search\" }}\n        </button></nb-card-header\n      >\n      <div class=\"container\">\n        <img src=\"../../assets//images/scam.png\" class=\"tinker-logo\" />\n        <!-- <img src=\"../../assets//images/chsmc.png\" class=\"tinker-logo\"> -->\n        <h2 style=\"z-index: 9999999\">ScamWatch PH</h2>\n        <div class=\"form-text error\">\n          {{ msg }}\n          <toaster-container [toasterconfig]=\"config\"> </toaster-container>\n        </div>\n\n        <!-- <form class=\"form\" #f=\"ngForm\">\n        <input ng-model=\"login\" type=\"text\" placeholder=\"Username\" [(ngModel)]=\"username\" id=\"username\" #userName=\"ngModel\" name=\"username\" required>\n        <input ng-model=\"pwd\" type=\"password\" placeholder=\"Password\" [(ngModel)]=\"password\"  #passWord=\"ngModel\" name=\"password\" id=\"password\" required>\n        <button type=\"submit\" id=\"login-button\" (click)=\" onLoginSubmit()\" [disabled]=\"f.invalid\" [nbSpinner]=\"\" nbSpinnerStatus=\"success\">Login</button>\n      </form> -->\n        <form [formGroup]=\"form\" (submit)=\"onLoginSubmit()\">\n          <div class=\"form-group\">\n            <label style=\"color: white\" for=\"username\">Username</label>\n            <div\n              [ngClass]=\"{\n                'has-error':\n                  form.controls.username.errors && form.controls.username.dirty,\n                'has-success':\n                  form.controls.username.valid && form.controls.username.dirty\n              }\"\n            >\n              <input\n                class=\"form-control\"\n                type=\"text\"\n                name=\"username\"\n                formControlName=\"username\"\n              />\n              <ul class=\"help-block\">\n                <li\n                  *ngIf=\"\n                    form.controls.username.errors?.required &&\n                    form.controls.username.dirty\n                  \"\n                >\n                  This field is required.\n                </li>\n              </ul>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <label style=\"color: white\" for=\"password\">Password</label>\n            <div\n              [ngClass]=\"{\n                'has-error':\n                  form.controls.password.errors && form.controls.password.dirty,\n                'has-success':\n                  form.controls.password.valid && form.controls.password.dirty\n              }\"\n            >\n              <input\n                class=\"form-control\"\n                type=\"password\"\n                name=\"password\"\n                formControlName=\"password\"\n              />\n              <ul class=\"help-block\">\n                <li\n                  *ngIf=\"\n                    form.controls.password.errors?.required &&\n                    form.controls.password.dirty\n                  \"\n                >\n                  This field is required.\n                </li>\n              </ul>\n            </div>\n          </div>\n          <input\n            [disabled]=\"!form.valid || processing\"\n            class=\"btn btn-primary\"\n            type=\"submit\"\n            value=\"Login\"\n          />\n        </form>\n      </div>\n    </div>\n  </nb-layout-column>\n</nb-layout>\n<button nbButton status=\"success\" ghost>\n  {{ \"Back to Search\" }}\n</button>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, AbstractControl, FormBuilder, Validators, NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\n// import { routerTransition } from '../router.animation';\n// import { AuthService } from '../@core/services/auth.service';\n// import { SharedGlobalService } from '../@core/services/shared.global.service';\nimport { NbDialogService } from '@nebular/theme';\nimport { ToasterService, ToasterConfig } from 'angular2-toaster';\nimport { ConnectionService } from '../@core/services/connection.service';\nimport { AuthService } from '../services/auth.service';\nimport { TestComponent } from './modals/test/test.component';\n// import { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n  // animations: [routerTransition()]\n})\nexport class LoginComponent implements OnInit {\n\n  username: String;\n  password: String;\n  msg: String;\n  loader = false;\n  disableSubmit;\n  conn;\n  userID;\n\n  messageClass;\n  message;\n  processing = false;\n  form: FormGroup;\n\n  public config: ToasterConfig =\n    new ToasterConfig({\n      showCloseButton: true,\n      tapToDismiss: false,\n      timeout: 0\n    });\n\n\n  constructor(\n    // public sgs: SharedGlobalService,\n    // public authService: AuthService,\n    private dialogService: NbDialogService,\n    public cs: ConnectionService,\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private toastr: ToasterService,\n\n  ) {\n    // sgs.setBrowserTitle.emit('Login');\n    this.createForm();\n  }\n\n  ngOnInit() {\n\n  }\n\n  createForm() {\n    this.form = this.formBuilder.group({\n      username: ['', Validators.required], // Username field\n      password: ['', Validators.required] // Password field\n    });\n  }\n\n  enableForm() {\n    this.form.controls['username'].enable(); // Enable username field\n    this.form.controls['password'].enable(); // Enable password field\n  }\n\n  disableForm() {\n    this.form.controls['username'].disable(); // Disable username field\n    this.form.controls['password'].disable(); // Disable password field\n  }\n  Submit() {\n    const user = {\n      username: this.username,\n      password: this.password,\n    };\n\n  }\n  // Functiont to submit form and login user\n  onLoginSubmit() {\n    this.processing = true; // Used to submit button while is being processed\n    this.disableForm(); // Disable form while being process\n    // Create user object from user's input\n    const user = {\n      username: this.form.get('username').value, // Username input field\n      password: this.form.get('password').value // Password input field\n    }\n\n    // Function to send login data to API\n    this.authService.login(user).subscribe((data: any) => {\n\n      // Check if response was a success or error\n      if (!data.success) {\n        // this.messageClass = 'alert alert-danger'; // Set bootstrap error class\n        // this.message = data.message; // Set error message\n        //  this.toastr.error('Failed', data.message);\n        this.toastr.pop('error', 'Failed', data.message);\n\n\n        this.processing = false; // Enable submit button\n        this.enableForm(); // Enable form for editting\n\n\n\n      } else {\n        // this.messageClass = 'alert alert-success'; // Set bootstrap success class\n        // this.message = data.message; // Set success message\n        //  this.toastr.success('Success', data.message);\n        this.toastr.pop('success', 'Success', data.message);\n\n        // Function to store user's token in client local storage\n        this.authService.storeUserData(data.token, data.user, data.userToken, data.id);\n\n\n        if (this.authService.CurrentlyloggedIn()) {\n          console.log(this.authService.CurrentlyloggedIn());\n          setTimeout(() => {\n            this.router.navigate([data.role]); // Navigate to dashboard view\n          }, 1000);\n\n        } else {\n          this.authService.logout()\n          this.router.navigate(['login']); // Navigate to dashboard view\n        }\n\n        // After 2 seconds, redirect to dashboard page\n\n      }\n    });\n  }\n\n\n  showBootstrapModal() {\n    // this.sgs.Modal({\n    //     header: `Notice`,\n    //     content: `\n    //     test\n    //     `,\n    //     buttonName: 'close'\n    //   }, { size: 'md'});\n  }\n\n  showMaterialModal() {\n    this.dialogService.open(TestComponent, {\n      context: {\n        title: 'This is a title passed to the dialog component',\n      },\n    });\n  }\n\n\n  backToSearch(){\n\n    this.router.navigate(['app/viewscammer'])\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginRoutingModule } from './login-routing.modules';\nimport { LoginComponent } from './login.component';\nimport { ThemeModule } from '../@theme/theme.module';\nimport { NbSpinnerModule } from '@nebular/theme';\nimport { NbCardModule, NbButtonModule } from '@nebular/theme';\nimport { NbLayoutModule } from '@nebular/theme';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TestComponent } from './modals/test/test.component';\nimport { ToasterModule } from 'angular2-toaster';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ThemeModule,\n    LoginRoutingModule,\n    NbSpinnerModule,\n    NbCardModule,\n    NbLayoutModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NbButtonModule,\n    ToasterModule.forChild()\n\n  ],\n  declarations: [LoginComponent, TestComponent],\n  entryComponents: [\n    TestComponent\n  ]\n})\nexport class LoginModule { }\n","<nb-card>\n    <nb-card-header>{{ title }}</nb-card-header>\n    <nb-card-body>\n      <div class=\"row\">\n        <div class=\"col-sm-12\">\n          TEST\n        </div>\n      </div>\n    </nb-card-body>\n    <nb-card-footer>\n      <button nbButton matRipple hero status=\"primary\" (click)=\"dismiss()\">Dismiss Dialog</button>\n    </nb-card-footer>\n</nb-card>\n  ","import { Component, OnInit, Input } from '@angular/core';\nimport { NbDialogRef } from '@nebular/theme';\n\n@Component({\n  selector: 'ngx-test',\n  templateUrl: './test.component.html',\n  styleUrls: ['./test.component.scss']\n})\nexport class TestComponent implements OnInit {\n\n  @Input() title: String;\n\n  constructor(protected ref: NbDialogRef<TestComponent>) {}\n\n  ngOnInit(): void {\n  }\n\n  dismiss() {\n    this.ref.close();\n  }\n  \n}\n\n"]}